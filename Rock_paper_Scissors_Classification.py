# -*- coding: utf-8 -*-
"""Rock_Paper_Scissors_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/randiijulian/Rock-Paper-Scissors-Classification/blob/main/Rock_Paper_Scissors_Classification.ipynb

Nama : Randi Julian Saputra

## Final Project Dicoding ML Untuk Pemula
"""

from google.colab import drive
drive.mount('/content/drive')

# install split-folders agar mempermudah membagi kategori kebeberapa file
!pip install split-folders

#Import Library
import zipfile, os
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import splitfolders

#Pastikan Tensorflow versi 2 atau lebih
print(tf.__version__)

from sklearn.model_selection import train_test_split #Library untuk split data training dan validasi
from tensorflow.keras.preprocessing.image import ImageDataGenerator #Library untuk augmentasi dan generate gambar
from tensorflow.keras.optimizers import RMSprop #Library untuk optimasi data
#Library untuk inputan gambar dan grafik
from google.colab import files
from keras.preprocessing import image

#Melakukan import dataset dari server
!wget --no-check-certificate \
https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

#Ekstrasi pada file zip sebelumnya
local_zip = "/content/rockpaperscissors.zip"
zip_ref = zipfile.ZipFile(local_zip, "r")
zip_ref.extractall("/content")
zip_ref.close()

base_folder = "/content/rockpaperscissors/rps-cv-images"
# train_folder = os.path.join(base_folder, "train")
# validation_folder = os.path.join(base_folder, "val")
train_folder = "/content/output/train"
validation_folder = "/content/output/val"

# memisahkan folder dataset menjadi train 60% dan val 40%
splitfolders.ratio(base_folder, output="output", seed=1337, ratio=(.6, .4), group_prefix=None)

# melihat struktur data pada folder train
os.listdir('/content/output/train')

# melihat struktur data pada folder validation
os.listdir('/content/output/val')

#Folder train untuk masing-masing label
train_rock = os.path.join(train_folder, "rock")
train_paper = os.path.join(train_folder, "paper")
train_scissors = os.path.join(train_folder, "scissors")

#Folder validation untuk masing masing label
validation_rock = os.path.join(validation_folder, "rock")
validation_paper = os.path.join(validation_folder, "paper")
validation_scissors = os.path.join(validation_folder, "scissors")

#Augmentasi dan generate gambar
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    vertical_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')
 
test_datagen = ImageDataGenerator(
                    rescale=1./255)

#Persiapan Data train dan validasi dari folder yang telah dibuat
train_generator = train_datagen.flow_from_directory(
        train_folder,  # folder data train
        target_size=(150, 150),  # scaling gambar menjadi 150*150 px
        batch_size=32,
        class_mode='categorical')  # karena kita merupakan masalah klasifikasi 3 kelas maka menggunakan class_mode = 'categorical'
validation_generator = test_datagen.flow_from_directory(
        validation_folder, # folder data validasi
        target_size=(150, 150),  # scaling gambar menjadi 150*150 px
        batch_size=32, 
        class_mode='categorical') # karena kita merupakan masalah klasifikasi 3 kelas maka menggunakan class_mode = 'categorical'

# membangun model CNN untuk klasifikasi gambar
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

# Optimize the model use adam
model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(learning_rate=0.0001),
              metrics=['accuracy'])

#Callback untuk mencegah overfitting dengan menghentikan training, apabila telah terpenuhi
class reduceOverfitting(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.96 and logs.get('val_accuracy') > 0.87):
      print("\nStopped! Akurasi sudah mencapai 96%")
      self.model.stop_training = True
stop = reduceOverfitting()

plot = model.fit(
    train_generator,
    steps_per_epoch = train_generator.n//train_generator.batch_size, # 1312 gambar = batch_size * steps
    epochs = 30,
    validation_data = validation_generator,
    validation_steps = validation_generator.n//validation_generator.batch_size, # 876 gambar = batch_size * steps
    verbose =2, #Menampilkan epoh
      callbacks=[stop] #Memanggil fungsi callbacks apabila hasil akurasi diatas 96%
)

# evaluasi model untuk accuracy dan loss
eval_train = model.evaluate(train_generator)
print("Test Accuracy: %.2f%%" % (eval_train[1]*100))
eval_validation = model.evaluate(validation_generator)
print("Test Validation: %.2f%%" % (eval_validation[1]*100))

# Commented out IPython magic to ensure Python compatibility.
#Input Gambar
# %matplotlib inline
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # Predict Images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  
  print(fn)
  if classes[0,0]!=0:
    print('Ini Adalah Kertas')
  elif classes[0,1]!=0:
    print('Ini Adalah Batu')
  else:
    print('Ini Adalah Gunting')

#Accuracy Plot Grafik
plt.plot(plot.history['accuracy'], label='Training Accuracy')
plt.plot(plot.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy Graphics')
plt.ylabel('Loss Accuracy')
plt.xlabel('Epoh')
plt.legend(loc="lower right")
plt.show()
#Loss Plot Grafik
plt.plot(plot.history['loss'], label='Loss Training')
plt.plot(plot.history['val_loss'], label='Loss Validation')
plt.title('Graphics Loss')
plt.ylabel('Loss Value')
plt.xlabel('Epoh')
plt.legend(loc="upper right")
plt.show()
